import os

configfile: "/usr/local/snuupy/snakemake/config.yaml"
pipelineDir = config['pipelineDir']
resultDir = config['resultDir']
split=True

rule all:
    input:
        f"{config['resultDir']}step16_generateMtx/generateMtxFinished.empty"

rule runCellRanger:
    input:
        runCellRangerConfig = config['runCellRangerConfig']
    output:
        runCellRangerFinished = f"{config['resultDir']}step1_runCellRanger/runCellRangerFinished.empty"
    params:
        gpu = "0"

    threads:56
    shell:
        """
cd {pipelineDir}
python ./removeExonRegion/removeExonRegion.py runCellRanger -p {input.runCellRangerConfig} &&touch {output.runCellRangerFinished}
        """

rule parseIllumina:
    input:
        runCellRangerFinished = f"{config['resultDir']}step1_runCellRanger/runCellRangerFinished.empty"
    output:
        parseIlluminaResults = f"{config['resultDir']}step2_parseIllumina/parseIlluminaResults.index"
    params:
        genomeFai = config['genomeFai'],
        useBarcodeGz = f"{config['resultDir']}step1_runCellRanger/mm10/outs/filtered_feature_bc_matrix/barcodes.tsv.gz",
        useBarcode = f"{config['resultDir']}step1_runCellRanger/mm10/outs/filtered_feature_bc_matrix/barcodes.tsv",
        runCellRangerBam = f"{config['resultDir']}step1_runCellRanger/mm10/outs/possorted_genome_bam.bam",
        windowSize = 500,
        gpu = "0"

    threads:24
    shell:
        """
cd {pipelineDir}
gzip -d -c {params.useBarcodeGz} > {params.useBarcode} &&
python ./snuupy/snuupy.py parseIllumina --bam {params.runCellRangerBam} --barcode {params.useBarcode} --genome {params.genomeFai} --window {params.windowSize} --parsed {output.parseIlluminaResults}
        """

rule minimapMappingRaw:
    input:
        rawNanoporeFa = config['rawNanoporeFa']
    output:
        rawMappingResult = f"{config['resultDir']}step3_minimapMappingRaw/rawMappingResult.bam"
    params:
        minimap2Path = config['minimap2Path'],
        genomeFa = config['genomeFa'],
        geneAnnoBed = config['geneAnnoBed'],
        gpu = "0"

    threads:56
    shell:
        """
cd {pipelineDir}
{params.minimap2Path} -ax splice --secondary=no -uf --MD --sam-hit-only -t {threads} --junc-bed {params.geneAnnoBed} {params.genomeFa} {input.rawNanoporeFa} | samtools sort - -o {output.rawMappingResult} && samtools index {output.rawMappingResult}
        """








checkpoint splitBam:
     input: f"{config['resultDir']}step3_minimapMappingRaw/rawMappingResult.bam"
     output: directory(f"{config['resultDir']}step3_minimapMappingRaw/splitBam")
     params :
         prefix = 'rawMappingResult'
     threads:56
     shell:
           """
           mkdir -p {output}
           picard SplitSamByNumberOfReads I={input} O={output}  N_READS=10000000 OUT_PREFIX={params.prefix} VALIDATION_STRINGENCY=SILENT
           """

rule addUnmappedBaseTag:
    input:
        rawMappingResult = resultDir + "step3_minimapMappingRaw/splitBam/rawMappingResult_0{i}.bam"
    output:
        rawMappingResultAddUnmappedTag = temp(resultDir + "step4_addUnmappedBaseTag/splitBam/rawMappingResultAddUnmappedTag_0{i}.bam"),
        readNameFile = temp(resultDir + "step4_addUnmappedBaseTag/splitBam/readNamesFile_0{i}.txt"),
        subFasta = temp(resultDir + "step4_addUnmappedBaseTag/splitFasta/subFasta_0{i}.fa")
    params:
        rawNanoporeFa = config['rawNanoporeFa'],
        BamOutdir = resultDir + "step4_addUnmappedBaseTag/splitBam/",
        FastaOutDir = resultDir + "step4_addUnmappedBaseTag/splitFasta/",
        gpu = "0"

    threads:24
    shell:
        """
    mkdir -p {params.FastaOutDir}
    mkdir -p  {params.BamOutdir}
    samtools view {input.rawMappingResult} | cut -f1 | sort -u > {output.readNameFile} &&
    seqtk subseq {params.rawNanoporeFa} {output.readNameFile} > {output.subFasta} &&
    cd {pipelineDir}
    samtools index {input.rawMappingResult} &&
    python ./snuupy/snuupy.py addUnmappedBaseTag -i {input.rawMappingResult} -f {output.subFasta} -o {output.rawMappingResultAddUnmappedTag}
         """

def aggregate_input(wildcards):
    checkpoint_output = checkpoints.splitBam.get(**wildcards).output[0]
    return expand(resultDir + "step4_addUnmappedBaseTag/splitBam/rawMappingResultAddUnmappedTag_0{i}.bam",
           i=glob_wildcards(os.path.join(checkpoint_output, "rawMappingResult_0{i}.bam")).i)



rule mergeBam:
    input:
        flagueTag = aggregate_input
    output:
        rawMappingResultAddUnmappedTag = f"{config['resultDir']}step4_addUnmappedBaseTag/rawMappingResultAddUnmappedTag.bam"
    params:
        rawNanoporeFa = config['rawNanoporeFa'],
        gpu = "0"

    threads:24
    shell:
        """
        samtools merge {output.rawMappingResultAddUnmappedTag} {input.flagueTag}
        """








rule generateNanoporeWindow:
    input:
        rawMappingResultAddUnmappedTag = f"{config['resultDir']}step4_addUnmappedBaseTag/rawMappingResultAddUnmappedTag.bam"
    output:
        generateNanoporeWindowFinished = f"{config['resultDir']}step5_generateNanoporeWindow/generateNanoporeWindowFinished.empty"
    params:
        generateNanoporeWindow = f"{config['resultDir']}step5_generateNanoporeWindow/generateNanoporeWindow/",
        genomeFai = config['genomeFai'],
        windowSize = 500,
        gpu = "0"

    threads:12
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py generateNanoporeWindow --genome {params.genomeFai} -b {input.rawMappingResultAddUnmappedTag} -w {params.windowSize} -o {params.generateNanoporeWindow} && touch {output.generateNanoporeWindowFinished}
        """

rule generateIlluminaWindow:
    input:
        parseIlluminaResults = f"{config['resultDir']}step2_parseIllumina/parseIlluminaResults.index"
    output:
        generateIlluminaWindowFinished = f"{config['resultDir']}step6_generateIlluminaWindow/generateIlluminaWindowFinished.empty"
    params:
        generateIlluminaWindow = f"{config['resultDir']}step6_generateIlluminaWindow/generateIlluminaWindow/",
        gpu = "0"

    threads:24
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py generateIlluminaWindow -i {input.parseIlluminaResults} -o {params.generateIlluminaWindow} && touch {output.generateIlluminaWindowFinished}
        """

rule windowBlast:
    input:
        generateIlluminaWindowFinished = f"{config['resultDir']}step6_generateIlluminaWindow/generateIlluminaWindowFinished.empty",
        generateNanoporeWindowFinished = f"{config['resultDir']}step5_generateNanoporeWindow/generateNanoporeWindowFinished.empty"
    output:
        windowBlastFinished = f"{config['resultDir']}step7_windowBlast/windowBlastFinished.empty"
    params:
        blastResults = f"{config['resultDir']}step7_windowBlast/blastResults/",
        generateIlluminaWindow = f"{config['resultDir']}step6_generateIlluminaWindow/generateIlluminaWindow/",
        generateNanoporeWindow = f"{config['resultDir']}step5_generateNanoporeWindow/generateNanoporeWindow/",
        blastPath = config['blastPath'],
        gpu = "0"

    threads:56
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py windowBlast -i {params.generateIlluminaWindow} -n {params.generateNanoporeWindow} -o {params.blastResults} -t {threads} -b {params.blastPath} && touch {output.windowBlastFinished}
        """






checkpoint splitWindowBlast:
     input:
         allResult = f"{config['resultDir']}step7_windowBlast/blastResults/allResult.result",
         windowBlastFinished = f"{config['resultDir']}step7_windowBlast/windowBlastFinished.empty"
     output: directory(f"{config['resultDir']}step7_windowBlast/blastResults/splitWindowBlast")
     params :
         prefix = 'splitedResult.',
         splited = f"{config['resultDir']}step7_windowBlast/blastResults/splitedResult.*",
         blastResDir = f"{config['resultDir']}step7_windowBlast/blastResults/",
         nSplit = 79695813 # line per file
     threads:56
     shell:
           """
           mkdir -p {output}
           cd {params.blastResDir}
           split -d -l {params.nSplit} {input.allResult} {params.prefix}
           mv {params.splited} {output}
           """

rule getMismatch:
    input:
        rawMappingResultAddUnmappedTag = f"{config['resultDir']}step4_addUnmappedBaseTag/rawMappingResultAddUnmappedTag.pkl",
        windowBlastMerged = resultDir +"step7_windowBlast/blastResults/splitWindowBlast/splitedResult.{i}"
    output:
        nanoporeED = resultDir +"step8_getMismatch/allnanoporeED/nanoporeED_{i}.feather"
    params:
        outdir = resultDir +"step8_getMismatch/allnanoporeED",
        gpu = "0"
    threads:56
    shell:
        """
        mkdir -p {params.outdir}
        cd {pipelineDir}
        python ./snuupy/snuupy.py getMismatch  --kit v3 -i {input.windowBlastMerged} -b {input.rawMappingResultAddUnmappedTag} -o {output.nanoporeED} -t {threads}
        """


def aggregate_nanoporeED(wildcards):
    checkpoint_output = checkpoints.splitWindowBlast.get(**wildcards).output[0]
    return expand(resultDir + "step8_getMismatch/allnanoporeED/nanoporeED_{i}.feather",
           i=glob_wildcards(os.path.join(checkpoint_output, "splitedResult.{i}")).i)


rule barcodeAssignment:
    input:
        allNanoporeED = aggregate_nanoporeED
    output:
        nanoporeAssigned = f"{config['resultDir']}step9_barcodeAssignment/nanoporeAssigned.feather"
    params:
        gpu = "0",
        barcodeED = 2,
        umiED = 2

    threads:30
    shell:
        """
        cd {pipelineDir}
        python ./snuupy/barcodeAssignment.py -i {input.allNanoporeED} -o {output.nanoporeAssigned} --ED-barcode {params.barcodeED} --ED-UMI {params.umiED}
        """







rule polishReads:
    input:
        nanoporeAssigned = f"{config['resultDir']}step9_barcodeAssignment/nanoporeAssigned.feather",
        rawNanoporeFa = config['rawNanoporeFa']
    output:
        polishedReads = f"{config['resultDir']}step10_polishReads/polishedReads.fa"
    params:
        polishReadsTempRaw = f"{config['resultDir']}step10_polishReads/polishReadsTempRaw/",
        polishReadsTempFinal = f"{config['resultDir']}step10_polishReads/polishReadsTempFinal/",
        seqkitPath = config['seqkitPath'],
        raconPath = config['raconPath'],
        gpu = "0"

    threads:56
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py polishReads -i {input.nanoporeAssigned} -f {input.rawNanoporeFa} -T {params.polishReadsTempRaw} -F {params.polishReadsTempFinal} -o {output.polishedReads} -t {threads} --racon {params.raconPath} --seqkit {params.seqkitPath}
        """

rule minimapMappingPolished:
    input:
        polishedReads = f"{config['resultDir']}step10_polishReads/polishedReads.fa"
    output:
        polishedMappingResult = f"{config['resultDir']}step11_minimapMappingPolished/polishedMappingResult.bam"
    params:
        minimap2Path = config['minimap2Path'],
        genomeFa = config['genomeFa'],
        geneAnnoBed = config['geneAnnoBed'],
        gpu = "0"

    threads:56
    shell:
        """
cd {pipelineDir}
{params.minimap2Path} -ax splice --secondary=no -uf --MD --sam-hit-only -t {threads} --junc-bed {params.geneAnnoBed} {params.genomeFa} {input.polishedReads} | samtools sort - -o {output.polishedMappingResult} && samtools index {output.polishedMappingResult}
        """

rule addGeneName:
    input:
        polishedMappingResult = f"{config['resultDir']}step11_minimapMappingPolished/polishedMappingResult.bam"
    output:
        polishedReadsAddGNPickle = f"{config['resultDir']}step12_addGeneName/polishedReadsAddGNPickle.pickle",
        polishedReadsAddGNBam = f"{config['resultDir']}step12_addGeneName/polishedReadsAddGNBam.bam"
    params:
        geneAnnoBed = config['geneAnnoBed'],
        bedtoolsPath = config['bedtoolsPath'],
        gpu = "0"

    threads:24
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py addGeneName -i {input.polishedMappingResult} --bed {params.geneAnnoBed} --out-pickle {output.polishedReadsAddGNPickle} --out-bam {output.polishedReadsAddGNBam} --bedtools {params.bedtoolsPath}
        """

rule getSpliceInfo:
    input:
        polishedMappingResult = f"{config['resultDir']}step11_minimapMappingPolished/polishedMappingResult.bam",
        polishedReadsAddGNPickle = f"{config['resultDir']}step12_addGeneName/polishedReadsAddGNPickle.pickle"
    output:
        splicingInfo = f"{config['resultDir']}step13_getSpliceInfo/splicingInfo.tsv"
    params:
        bedtoolsPath = config['bedtoolsPath'],
        geneAnnoRepreBed = config['geneAnnoRepreBed'],
        gpu = "0"

    threads:24
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py getSpliceInfo -i {input.polishedMappingResult} -b {params.geneAnnoRepreBed} -o {output.splicingInfo} -g {input.polishedReadsAddGNPickle} --bedtools {params.bedtoolsPath}
        """

rule addPolyATag:
    input:
        nanoporeAssigned = f"{config['resultDir']}step9_barcodeAssignment/nanoporeAssigned.feather",
        polishedReadsAddGNBam = f"{config['resultDir']}step12_addGeneName/polishedReadsAddGNBam.bam",
        rawNanoporeFa = config['rawNanoporeFa'],
        nanoporeWorkspace = config['nanoporeWorkspace'],
        nanoporeSeqSummary = config['nanoporeSeqSummary'],
        geneAnnoBed = config['geneAnnoBed']
    output:
        polishedReadsAddGNPABam = f"{config['resultDir']}step14_addPolyATag/polishedReadsAddGNPABam.bam"
    params:
        polyACallerTemp = f"{config['resultDir']}step14_addPolyATag/polyACallerTemp/",
        genomeFa = config['genomeFa'],
        geneAnnoBed = config['geneAnnoBed'],
        minimap2Path = config['minimap2Path'],
        gpu = "0"

    threads:56
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py addPolyATag --in-fasta {input.rawNanoporeFa} --genome {params.genomeFa} -t {threads} --in-f5-workspace {input.nanoporeWorkspace} --in-f5-summary {input.nanoporeSeqSummary} --bed {params.geneAnnoBed} --tempDir {params.polyACallerTemp} --feather {input.nanoporeAssigned} --in-bam {input.polishedReadsAddGNBam} --out-bam {output.polishedReadsAddGNPABam} --minimap {params.minimap2Path}
        """

rule polyAClusterDetected:
    input:
        polishedReadsAddGNPABam = f"{config['resultDir']}step14_addPolyATag/polishedReadsAddGNPABam.bam"
    output:
        polyAClusterDetectedFinished = f"{config['resultDir']}step15_polyAClusterDetected/polyAClusterDetectedFinished.empty"
    params:
        polyACluster = f"{config['resultDir']}step15_polyAClusterDetected/polyACluster/",
        geneNot12Bed = config['geneNot12Bed'],
        genomeFa = config['genomeFa'],
        gpu = "0"

    threads:56
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py polyAClusterDetected --infile {input.polishedReadsAddGNPABam} --gene-bed {params.geneNot12Bed} --out-dir {params.polyACluster} -t {threads} --fasta {params.genomeFa} && touch {output.polyAClusterDetectedFinished}
        """

rule generateMtx:
    input:
        splicingInfo = f"{config['resultDir']}step13_getSpliceInfo/splicingInfo.tsv",
        polishedReadsAddGNPABam = f"{config['resultDir']}step14_addPolyATag/polishedReadsAddGNPABam.bam",
        polyAClusterDetectedFinished = f"{config['resultDir']}step15_polyAClusterDetected/polyAClusterDetectedFinished.empty"
    output:
        generateMtxFinished = f"{config['resultDir']}step16_generateMtx/generateMtxFinished.empty"
    params:
        IlluminaMultiMat = f"{config['resultDir']}step16_generateMtx/IlluminaMultiMat/",
        NanoporeMultiMat = f"{config['resultDir']}step16_generateMtx/NanoporeMultiMat/",
        usedIntron = config['usedIntron'],
        illuminaExpressionMtx = f"{config['resultDir']}step1_runCellRanger/test/outs/filtered_feature_bc_matrix.h5",
        apaCluster = f"{config['resultDir']}step15_polyAClusterDetected/polyACluster/polya_cluster.filtered.bed",
        gpu = "0"

    threads:24
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py generateMtx -i {input.splicingInfo} --in-illumina {params.illuminaExpressionMtx} --apa-pac {params.apaCluster} --apa-bam {input.polishedReadsAddGNPABam} --ir --ir-list {params.usedIntron} --out-nanopore {params.NanoporeMultiMat} --out-illumina {params.IlluminaMultiMat} && touch {output.generateMtxFinished}
        """

