import pandas as pd
#configfile: "/public/home/liuzj/github/snuupy/snakemake/config_byPrimer.yaml"
pipelineDir = config['pipelineDir']
resultDir = config["resultDir"].rstrip("/") + "/"
pipelineDir = config["pipelineDir"].rstrip("/") + "/"


## get parameter of rule `runCellRanger` ##
df_runCellRanger = pd.DataFrame(
    [config["runCellRangerConfig"]], index=["test"], columns=["cellRangerConfig"]
)
df_runCellRanger = df_runCellRanger.assign(
    useBarcodeGz=lambda df: df.index
    + "/outs/filtered_feature_bc_matrix/barcodes.tsv.gz",
    useBarcode=lambda df: df.index + "/outs/filtered_feature_bc_matrix/barcodes.tsv",
    cellRangerBam=lambda df: df.index + "/outs/possorted_genome_bam.bam",
    illuminaMtx = lambda df: df.index + "/outs/filtered_feature_bc_matrix.h5",
)
for column in ['useBarcodeGz', 'useBarcode', 'cellRangerBam', 'illuminaMtx']:
    df_runCellRanger[column] = resultDir + 'step1_runCellRanger/' + df_runCellRanger[column]


## get parameter of rule `parseIllumina` ##
df_parseIllumina = pd.DataFrame([500], index=["windowSize"], columns=["test"]).T
df_parseIllumina = df_parseIllumina.assign(
    genomeFai=config["genomeFai"],
    useBarcodeGz=lambda df: df.index
    + "/outs/filtered_feature_bc_matrix/barcodes.tsv.gz",
    useBarcode=lambda df: df.index + "/outs/filtered_feature_bc_matrix/barcodes.tsv",
    cellRangerBam=lambda df: df.index + "/outs/possorted_genome_bam.bam",
    parseIlluminaResults=lambda df: df.index + ".parsed.index",
)
for column in ['parseIlluminaResults']:
    df_parseIllumina[column] = resultDir + 'step2_parseIllumina/' + df_parseIllumina[column]


## get parameter of rule `minimapMappingRaw` ##
df_minimapMappingRaw = pd.DataFrame(
    [
        config["rawNanoporeFa"],
        config["minimap2Path"],
        config["genomeFa"],
        config["geneAnnoBed"],
    ],
    index=["rawNanoporeFa", 'minimap2Path', 'genomeFa', 'geneAnnoBed'],
    columns=["test"],
).T.assign(outputBam = lambda df:df.index + '.rawMappingResult.bam')
for column in ['outputBam']:
    df_minimapMappingRaw[column] = resultDir + 'step3_minimapMappingRaw/' + df_minimapMappingRaw[column]


## get parameter of rule `addUnmappedBaseTag` ##
df_addUnmappedBaseTag = pd.DataFrame(["test.addBase.bam"],index=["output"],columns=["test"]).T
for column in ['output']:
    df_addUnmappedBaseTag[column] = resultDir + 'step4_addUnmappedBaseTag/' + df_addUnmappedBaseTag[column]


## get parameter of rule `generateNanoporeWindow` ##
df_generateNanoporeWindow = pd.DataFrame(index=['test'])
df_generateNanoporeWindow = df_generateNanoporeWindow.pipe(lambda df:df.assign(
    outputDir = df.index + '/outputDir/',
    windowSize = 500,
    genomeFai = config["genomeFai"]
))
for column in ['outputDir']:
    df_generateNanoporeWindow[column] = resultDir + 'step5_generateNanoporeWindow/' + df_generateNanoporeWindow[column]


## get parameter of rule `generateIlluminaWindow` ##
df_generateIlluminaWindow = pd.DataFrame(index=['test'])
df_generateIlluminaWindow = df_generateIlluminaWindow.pipe(lambda df:df.assign(
    illuminaDir = df.index + '/outputDir/',
))
for column in ['illuminaDir']:
    df_generateIlluminaWindow[column] = resultDir + 'step6_generateIlluminaWindow/' + df_generateIlluminaWindow[column]


## get parameter of rule `windowBlast` ##
df_windowBlast = pd.DataFrame(index=['test'])
df_windowBlast = df_windowBlast.pipe(lambda df:df.assign(
    dirResults = df.index + '/output/',
    blastPath = config['blastPath'],
    mergedResult = df.index + '/output/allResult.result'
))
for column in ['dirResults', 'mergedResult']:
    df_windowBlast[column] = resultDir + 'step7_windowBlast/' + df_windowBlast[column]


## get parameter of rule `getMismatch` ##
df_getMismatch = pd.DataFrame(index=['test'])
df_getMismatch = df_getMismatch.pipe(lambda df:df.assign(
    nanoporeED = df.index + '.nanoporeED.feather'
))
for column in ['nanoporeED']:
    df_getMismatch[column] = resultDir + 'step8_getMismatch/' + df_getMismatch[column]


## get parameter of rule `barcodeAssignment` ##
df_barcodeAssignment = pd.DataFrame(index=['test'])
df_barcodeAssignment = df_barcodeAssignment.pipe(lambda df:df.assign(
    nanoporeAssigned = df.index + '.nanoporeAssigned.feather',
    barcodeED = 3,
    umiED=3
))
for column in ['nanoporeAssigned']:
    df_barcodeAssignment[column] = resultDir + 'step9_barcodeAssignment/' + df_barcodeAssignment[column]


## get parameter of rule `polishReads` ##
df_polishReads = pd.DataFrame(index=['test'])
df_polishReads = df_polishReads.pipe(lambda df:df.assign(
    rawFa = config['rawNanoporeFa'],
    polishedFa = df.index + '.polished.fa',
    dirTempRaw = df.index + '/tempRaw/',
    dirTempFinal = df.index + '/tempFinal/',
    path_seqkit = config['seqkitPath'],
    path_racon = config['raconPath']
))
for column in ['polishedFa', 'dirTempRaw', 'dirTempFinal']:
    df_polishReads[column] = resultDir + 'step10_polishReads/' + df_polishReads[column]


## get parameter of rule `minimapMappingPolished` ##
df_minimapMappingPolished = pd.DataFrame(index=['test'])
df_minimapMappingPolished = df_minimapMappingPolished.pipe(lambda df:df.assign(
    mappingBam = df.index + '.mappingBam.bam',
    genomeFa = config['genomeFa'],
    geneAnnoBed = config['geneAnnoBed'],
    path_minimap2 = config['minimap2Path']
))
for column in ['mappingBam']:
    df_minimapMappingPolished[column] = resultDir + 'step11_minimapMappingPolished/' + df_minimapMappingPolished[column]


## get parameter of rule `addGeneName` ##
df_addGeneName = pd.DataFrame(index=["test"]).pipe(
    lambda df: df.assign(
        bedtoolsPath=config["bedtoolsPath"],
        geneBed=config["geneAnnoBed"],
        addGNPickle="addGNPickle.pickle",
        addGNBam="addGNBam.bam",
    )
)
for column in ['addGNPickle', 'addGNBam']:
    df_addGeneName[column] = resultDir + 'step12_addGeneName/' + df_addGeneName[column]


## get parameter of rule `getSpliceInfo` ##
df_getSpliceInfo = pd.DataFrame(index=["test"]).assign(
    splicingInfo="splicingInfo.tsv",
    bedtoolsPath=config["bedtoolsPath"],
    geneAnnoRepreBed = config['geneAnnoRepreBed'],
)
for column in ['splicingInfo']:
    df_getSpliceInfo[column] = resultDir + 'step13_getSpliceInfo/' + df_getSpliceInfo[column]


## get parameter of rule `addPolyATag` ##
df_addPolyATag = pd.DataFrame(index=["test"]).assign(
    addGNPABam="addGNPABam.bam",
    polyACallerWorkDir="polyACallerWorkDir/",
    nanoporeWorkspace=config["nanoporeWorkspace"],
    nanoporeSeqSummary=config['nanoporeSeqSummary'],
    geneAnnoBed = config['geneAnnoBed'],
    minimap2Path = config['minimap2Path'],
    genomeFa = config['genomeFa'],
    rawNanoporeFa = config['rawNanoporeFa'],
)
for column in ['addGNPABam', 'polyACallerWorkDir']:
    df_addPolyATag[column] = resultDir + 'step14_addPolyATag/' + df_addPolyATag[column]


## get parameter of rule `polyAClusterDetected` ##
df_polyAClusterDetected = pd.DataFrame(index=["test"]).assign(
    polyAClusterDir="polyACluster/",
    polyAClusterResult="polyACluster/polya_cluster.filtered.bed",
    geneAnnoBed = config['geneAnnoBed'],
    genomeFa = config['genomeFa'],
)
for column in ['polyAClusterDir', 'polyAClusterResult']:
    df_polyAClusterDetected[column] = resultDir + 'step15_polyAClusterDetected/' + df_polyAClusterDetected[column]


## get parameter of rule `generateMtx` ##
df_generateMtx = pd.DataFrame(index=["test"]).assign(
    h5muPath="result.h5mu",
    usedIntron=config["usedIntron"],
)
for column in ['h5muPath']:
    df_generateMtx[column] = resultDir + 'step16_generateMtx/' + df_generateMtx[column]

rule all:
    input:
        generateMtxFinished = [resultDir + 'step16_generateMtx/' + "" + sample + ".finished" for sample in df_generateMtx.index],

# parameter's dataframe of runCellRanger: 
# |      | cellRangerConfig                                                           | useBarcodeGz                                         | useBarcode                                        | cellRangerBam                      | illuminaMtx                             |
# |:-----|:---------------------------------------------------------------------------|:-----------------------------------------------------|:--------------------------------------------------|:-----------------------------------|:----------------------------------------|
# | test | /public/home/liuzj/github/snuupy/removeExonRegion/cellRangerParameter.yaml | test/outs/filtered_feature_bc_matrix/barcodes.tsv.gz | test/outs/filtered_feature_bc_matrix/barcodes.tsv | test/outs/possorted_genome_bam.bam | test/outs/filtered_feature_bc_matrix.h5 |
rule runCellRanger:
    input:
        cellRangerConfig = lambda wildcard: df_runCellRanger.at[wildcard.sample, 'cellRangerConfig'],
    output:
        runCellRangerFinished = resultDir + 'step1_runCellRanger/' + '{sample}.finished',
    params:
        gpu = 0,
    threads:56
    priority:0
    shell:
        """
cd {pipelineDir}
python ./removeExonRegion/removeExonRegion.py runCellRanger -p {input.cellRangerConfig}
touch {output.runCellRangerFinished}
        """

# parameter's dataframe of parseIllumina: 
# |      |   windowSize | genomeFai                                                                           | parseIlluminaResults   |
# |:-----|-------------:|:------------------------------------------------------------------------------------|:-----------------------|
# | test |          500 | /public/home/liuzj/publicPipeline/snuupy/example/00_data/ref/annoFile/genome.fa.fai | test.parsed.index      |
rule parseIllumina:
    input:
        runCellRangerFinished = resultDir + 'step1_runCellRanger/' + '{sample}.finished',
    output:
        parseIlluminaFinished = resultDir + 'step2_parseIllumina/' + '{sample}.finished',
    params:
        gpu = 0,
        useBarcode = lambda wildcard: df_runCellRanger.at[wildcard.sample, 'useBarcode'],
        useBarcodeGz = lambda wildcard: df_runCellRanger.at[wildcard.sample, 'useBarcodeGz'],
        cellRangerBam = lambda wildcard: df_runCellRanger.at[wildcard.sample, 'cellRangerBam'],
        windowSize = lambda wildcard: df_parseIllumina.at[wildcard.sample, 'windowSize'],
        genomeFai = lambda wildcard: df_parseIllumina.at[wildcard.sample, 'genomeFai'],
        parseIlluminaResults = lambda wildcard: df_parseIllumina.at[wildcard.sample, 'parseIlluminaResults'],
    threads:8
    priority:0
    shell:
        """
cd {pipelineDir}
gzip -d -c {params.useBarcodeGz} > {params.useBarcode} &&
python ./snuupy/snuupy.py parseIllumina --bam {params.cellRangerBam} --barcode {params.useBarcode} --genome {params.genomeFai} --window {params.windowSize} --parsed {params.parseIlluminaResults}
touch {output.parseIlluminaFinished}
        """

# parameter's dataframe of minimapMappingRaw: 
# |      | rawNanoporeFa                                                        | minimap2Path                                        | genomeFa                                                                        | geneAnnoBed                                                                    | outputBam                 |
# |:-----|:---------------------------------------------------------------------|:----------------------------------------------------|:--------------------------------------------------------------------------------|:-------------------------------------------------------------------------------|:--------------------------|
# | test | /public/home/liuzj/publicPipeline/snuupy/example/00_data/nanopore.fa | /public/home/liuzj/softwares/anaconda3/bin/minimap2 | /public/home/liuzj/publicPipeline/snuupy/example/00_data/ref/annoFile/genome.fa | /public/home/liuzj/publicPipeline/snuupy/example/00_data/ref/annoFile/gene.bed | test.rawMappingResult.bam |
rule minimapMappingRaw:
    input:
        rawNanoporeFa = lambda wildcard: df_minimapMappingRaw.at[wildcard.sample, 'rawNanoporeFa'],
    output:
        minimapMappingRawFinished = resultDir + 'step3_minimapMappingRaw/' + '{sample}.finished',
    params:
        gpu = 0,
        minimap2Path = lambda wildcard: df_minimapMappingRaw.at[wildcard.sample, 'minimap2Path'],
        genomeFa = lambda wildcard: df_minimapMappingRaw.at[wildcard.sample, 'genomeFa'],
        geneAnnoBed = lambda wildcard: df_minimapMappingRaw.at[wildcard.sample, 'geneAnnoBed'],
        outputBam = lambda wildcard: df_minimapMappingRaw.at[wildcard.sample, 'outputBam'],
    threads:48
    priority:0
    shell:
        """
cd {pipelineDir}
{params.minimap2Path} -ax splice --secondary=no -uf --MD --sam-hit-only -t {threads} --junc-bed {params.geneAnnoBed} {params.genomeFa} {input.rawNanoporeFa} | samtools sort - -o {params.outputBam} && samtools index {params.outputBam}
touch {output.minimapMappingRawFinished}
        """

# parameter's dataframe of addUnmappedBaseTag: 
# |      | output           |
# |:-----|:-----------------|
# | test | test.addBase.bam |
rule addUnmappedBaseTag:
    input:
        minimapMappingRawFinished = resultDir + 'step3_minimapMappingRaw/' + '{sample}.finished',
    output:
        addUnmappedBaseTagFinished = resultDir + 'step4_addUnmappedBaseTag/' + '{sample}.finished',
    params:
        gpu = 0,
        outputBam = lambda wildcard: df_minimapMappingRaw.at[wildcard.sample, 'outputBam'],
        output = lambda wildcard: df_addUnmappedBaseTag.at[wildcard.sample, 'output'],
    threads:2
    priority:0
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py addUnmappedBaseTag --by-primer -i {params.outputBam} -o {params.output}
touch {output.addUnmappedBaseTagFinished}
        """

# parameter's dataframe of generateNanoporeWindow: 
# |      | outputDir       |   windowSize | genomeFai                                                                           |
# |:-----|:----------------|-------------:|:------------------------------------------------------------------------------------|
# | test | test/outputDir/ |          500 | /public/home/liuzj/publicPipeline/snuupy/example/00_data/ref/annoFile/genome.fa.fai |
rule generateNanoporeWindow:
    input:
        addUnmappedBaseTagFinished = resultDir + 'step4_addUnmappedBaseTag/' + '{sample}.finished',
    output:
        generateNanoporeWindowFinished = resultDir + 'step5_generateNanoporeWindow/' + '{sample}.finished',
    params:
        gpu = 0,
        output = lambda wildcard: df_addUnmappedBaseTag.at[wildcard.sample, 'output'],
        outputDir = lambda wildcard: df_generateNanoporeWindow.at[wildcard.sample, 'outputDir'],
        windowSize = lambda wildcard: df_generateNanoporeWindow.at[wildcard.sample, 'windowSize'],
        genomeFai = lambda wildcard: df_generateNanoporeWindow.at[wildcard.sample, 'genomeFai'],
    threads:4
    priority:0
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py generateNanoporeWindow --by-primer --genome {params.genomeFai} -b {params.output} -w {params.windowSize} -o {params.outputDir} 
touch {output.generateNanoporeWindowFinished}
        """

# parameter's dataframe of generateIlluminaWindow: 
# |      | illuminaDir     |
# |:-----|:----------------|
# | test | test/outputDir/ |
rule generateIlluminaWindow:
    input:
        parseIlluminaFinished = resultDir + 'step2_parseIllumina/' + '{sample}.finished',
    output:
        generateIlluminaWindowFinished = resultDir + 'step6_generateIlluminaWindow/' + '{sample}.finished',
    params:
        gpu = 0,
        parseIlluminaResults = lambda wildcard: df_parseIllumina.at[wildcard.sample, 'parseIlluminaResults'],
        illuminaDir = lambda wildcard: df_generateIlluminaWindow.at[wildcard.sample, 'illuminaDir'],
    threads:4
    priority:0
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py generateIlluminaWindow -i {params.parseIlluminaResults} -o {params.illuminaDir}
touch {output.generateIlluminaWindowFinished}
        """

# parameter's dataframe of windowBlast: 
# |      | dirResults   | blastPath                                                  | mergedResult                 |
# |:-----|:-------------|:-----------------------------------------------------------|:-----------------------------|
# | test | test/output/ | /public/home/liuzj/softwares/blast/ncbi-blast-2.10.0+/bin/ | test/output/allResult.result |
rule windowBlast:
    input:
        generateIlluminaWindowFinished = resultDir + 'step6_generateIlluminaWindow/' + '{sample}.finished',
        generateNanoporeWindowFinished = resultDir + 'step5_generateNanoporeWindow/' + '{sample}.finished',
    output:
        windowBlastFinished = resultDir + 'step7_windowBlast/' + '{sample}.finished',
    params:
        gpu = 0,
        illuminaDir = lambda wildcard: df_generateIlluminaWindow.at[wildcard.sample, 'illuminaDir'],
        outputDir = lambda wildcard: df_generateNanoporeWindow.at[wildcard.sample, 'outputDir'],
        dirResults = lambda wildcard: df_windowBlast.at[wildcard.sample, 'dirResults'],
        blastPath = lambda wildcard: df_windowBlast.at[wildcard.sample, 'blastPath'],
        mergedResult = lambda wildcard: df_windowBlast.at[wildcard.sample, 'mergedResult'],
    threads:48
    priority:0
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py windowBlast --kit v3 -i {params.illuminaDir} -n {params.outputDir} -o {params.dirResults} -t {threads} -b {params.blastPath}
touch {output.windowBlastFinished}
        """

# parameter's dataframe of getMismatch: 
# |      | nanoporeED              |
# |:-----|:------------------------|
# | test | test.nanoporeED.feather |
rule getMismatch:
    input:
        windowBlastFinished = resultDir + 'step7_windowBlast/' + '{sample}.finished',
        addUnmappedBaseTagFinished = resultDir + 'step4_addUnmappedBaseTag/' + '{sample}.finished',
    output:
        getMismatchFinished = resultDir + 'step8_getMismatch/' + '{sample}.finished',
    params:
        gpu = 0,
        mergedResult = lambda wildcard: df_windowBlast.at[wildcard.sample, 'mergedResult'],
        output = lambda wildcard: df_addUnmappedBaseTag.at[wildcard.sample, 'output'],
        nanoporeED = lambda wildcard: df_getMismatch.at[wildcard.sample, 'nanoporeED'],
    threads:48
    priority:0
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py getMismatch --by-primer --kit v3 -i {params.mergedResult} -b {params.output} -o {params.nanoporeED} -t {threads} 
touch {output.getMismatchFinished}
        """

# parameter's dataframe of barcodeAssignment: 
# |      | nanoporeAssigned              |   barcodeED |   umiED |
# |:-----|:------------------------------|------------:|--------:|
# | test | test.nanoporeAssigned.feather |           3 |       3 |
rule barcodeAssignment:
    input:
        getMismatchFinished = resultDir + 'step8_getMismatch/' + '{sample}.finished',
    output:
        barcodeAssignmentFinished = resultDir + 'step9_barcodeAssignment/' + '{sample}.finished',
    params:
        gpu = 0,
        nanoporeED = lambda wildcard: df_getMismatch.at[wildcard.sample, 'nanoporeED'],
        nanoporeAssigned = lambda wildcard: df_barcodeAssignment.at[wildcard.sample, 'nanoporeAssigned'],
        barcodeED = lambda wildcard: df_barcodeAssignment.at[wildcard.sample, 'barcodeED'],
        umiED = lambda wildcard: df_barcodeAssignment.at[wildcard.sample, 'umiED'],
    threads:4
    priority:0
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py barcodeAssignment -i {params.nanoporeED} -o {params.nanoporeAssigned} --ED-barcode {params.barcodeED} --ED-UMI {params.umiED}
touch {output.barcodeAssignmentFinished}
        """

# parameter's dataframe of polishReads: 
# |      | rawFa                                                                | polishedFa       | dirTempRaw    | dirTempFinal    | path_seqkit                                       | path_racon                                         |
# |:-----|:---------------------------------------------------------------------|:-----------------|:--------------|:----------------|:--------------------------------------------------|:---------------------------------------------------|
# | test | /public/home/liuzj/publicPipeline/snuupy/example/00_data/nanopore.fa | test.polished.fa | test/tempRaw/ | test/tempFinal/ | /public/home/liuzj/softwares/anaconda3/bin/seqkit | /public/home/liuzj/softwares/racon/build/bin/racon |
rule polishReads:
    input:
        barcodeAssignmentFinished = resultDir + 'step9_barcodeAssignment/' + '{sample}.finished',
    output:
        polishReadsFinished = resultDir + 'step10_polishReads/' + '{sample}.finished',
    params:
        gpu = 0,
        nanoporeAssigned = lambda wildcard: df_barcodeAssignment.at[wildcard.sample, 'nanoporeAssigned'],
        rawFa = lambda wildcard: df_polishReads.at[wildcard.sample, 'rawFa'],
        polishedFa = lambda wildcard: df_polishReads.at[wildcard.sample, 'polishedFa'],
        dirTempRaw = lambda wildcard: df_polishReads.at[wildcard.sample, 'dirTempRaw'],
        dirTempFinal = lambda wildcard: df_polishReads.at[wildcard.sample, 'dirTempFinal'],
        path_seqkit = lambda wildcard: df_polishReads.at[wildcard.sample, 'path_seqkit'],
        path_racon = lambda wildcard: df_polishReads.at[wildcard.sample, 'path_racon'],
    threads:48
    priority:0
    shell:
        """
cd {pipelineDir}
mkdir -p {params.dirTempRaw}
mkdir -p {params.dirTempFinal}
python ./snuupy/snuupy.py polishReads -i {params.nanoporeAssigned} -f {params.rawFa} -T {params.dirTempRaw} -F {params.dirTempFinal} -o {params.polishedFa} -t {threads} --racon {params.path_racon} --seqkit {params.path_seqkit}
touch {output.polishReadsFinished}
        """

# parameter's dataframe of minimapMappingPolished: 
# |      | mappingBam          | genomeFa                                                                        | geneAnnoBed                                                                    | path_minimap2                                       |
# |:-----|:--------------------|:--------------------------------------------------------------------------------|:-------------------------------------------------------------------------------|:----------------------------------------------------|
# | test | test.mappingBam.bam | /public/home/liuzj/publicPipeline/snuupy/example/00_data/ref/annoFile/genome.fa | /public/home/liuzj/publicPipeline/snuupy/example/00_data/ref/annoFile/gene.bed | /public/home/liuzj/softwares/anaconda3/bin/minimap2 |
rule minimapMappingPolished:
    input:
        polishReadsFinished = resultDir + 'step10_polishReads/' + '{sample}.finished',
    output:
        minimapMappingPolishedFinished = resultDir + 'step11_minimapMappingPolished/' + '{sample}.finished',
    params:
        gpu = 0,
        polishedFa = lambda wildcard: df_polishReads.at[wildcard.sample, 'polishedFa'],
        mappingBam = lambda wildcard: df_minimapMappingPolished.at[wildcard.sample, 'mappingBam'],
        genomeFa = lambda wildcard: df_minimapMappingPolished.at[wildcard.sample, 'genomeFa'],
        geneAnnoBed = lambda wildcard: df_minimapMappingPolished.at[wildcard.sample, 'geneAnnoBed'],
        path_minimap2 = lambda wildcard: df_minimapMappingPolished.at[wildcard.sample, 'path_minimap2'],
    threads:48
    priority:0
    shell:
        """
cd {pipelineDir}
{params.path_minimap2} -ax splice --secondary=no -uf --MD --sam-hit-only -t {threads} --junc-bed {params.geneAnnoBed} {params.genomeFa} {params.polishedFa} | samtools sort - -o {params.mappingBam} && samtools index {params.mappingBam}
touch {output.minimapMappingPolishedFinished}
        """

# parameter's dataframe of addGeneName: 
# |      | bedtoolsPath                                        | geneBed                                                                        | addGNPickle        | addGNBam     |
# |:-----|:----------------------------------------------------|:-------------------------------------------------------------------------------|:-------------------|:-------------|
# | test | /public/home/liuzj/softwares/anaconda3/bin/bedtools | /public/home/liuzj/publicPipeline/snuupy/example/00_data/ref/annoFile/gene.bed | addGNPickle.pickle | addGNBam.bam |
rule addGeneName:
    input:
        minimapMappingPolishedFinished = resultDir + 'step11_minimapMappingPolished/' + '{sample}.finished',
    output:
        addGeneNameFinished = resultDir + 'step12_addGeneName/' + '{sample}.finished',
    params:
        gpu = 0,
        addGNPickle = lambda wildcard: df_addGeneName.at[wildcard.sample, 'addGNPickle'],
        addGNBam = lambda wildcard: df_addGeneName.at[wildcard.sample, 'addGNBam'],
        bedtoolsPath = lambda wildcard: df_addGeneName.at[wildcard.sample, 'bedtoolsPath'],
        geneBed = lambda wildcard: df_addGeneName.at[wildcard.sample, 'geneBed'],
        mappingBam = lambda wildcard: df_minimapMappingPolished.at[wildcard.sample, 'mappingBam'],
    threads:2
    priority:0
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py addGeneName -i {params.mappingBam} --bed {params.geneBed} --out-pickle {params.addGNPickle} --out-bam {params.addGNBam} --bedtools {params.bedtoolsPath}
touch {output.addGeneNameFinished}
        """

# parameter's dataframe of getSpliceInfo: 
# |      | splicingInfo     | bedtoolsPath                                        | geneAnnoRepreBed                                                                                              |
# |:-----|:-----------------|:----------------------------------------------------|:--------------------------------------------------------------------------------------------------------------|
# | test | splicingInfo.tsv | /public/home/liuzj/softwares/anaconda3/bin/bedtools | /public/home/liuzj/publicPipeline/snuupy/example/00_data/ref/annoFile/araport11.representative.gene_model.bed |
rule getSpliceInfo:
    input:
        minimapMappingPolishedFinished = resultDir + 'step11_minimapMappingPolished/' + '{sample}.finished',
        addGeneNameFinished = resultDir + 'step12_addGeneName/' + '{sample}.finished',
    output:
        getSpliceInfoFinished = resultDir + 'step13_getSpliceInfo/' + '{sample}.finished',
    params:
        gpu = 0,
        splicingInfo = lambda wildcard: df_getSpliceInfo.at[wildcard.sample, 'splicingInfo'],
        bedtoolsPath = lambda wildcard: df_getSpliceInfo.at[wildcard.sample, 'bedtoolsPath'],
        geneAnnoRepreBed = lambda wildcard: df_getSpliceInfo.at[wildcard.sample, 'geneAnnoRepreBed'],
        mappingBam = lambda wildcard: df_minimapMappingPolished.at[wildcard.sample, 'mappingBam'],
        addGNPickle = lambda wildcard: df_addGeneName.at[wildcard.sample, 'addGNPickle'],
    threads:2
    priority:0
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py getSpliceInfo --ratio -i {params.mappingBam} -b {params.geneAnnoRepreBed} -o {params.splicingInfo} -g {params.addGNPickle} --bedtools {params.bedtoolsPath}
touch {output.getSpliceInfoFinished}
        """

# parameter's dataframe of addPolyATag: 
# |      | addGNPABam     | polyACallerWorkDir   | nanoporeWorkspace                                                  | nanoporeSeqSummary                                                              | geneAnnoBed                                                                    | minimap2Path                                        | genomeFa                                                                        | rawNanoporeFa                                                        |
# |:-----|:---------------|:---------------------|:-------------------------------------------------------------------|:--------------------------------------------------------------------------------|:-------------------------------------------------------------------------------|:----------------------------------------------------|:--------------------------------------------------------------------------------|:---------------------------------------------------------------------|
# | test | addGNPABam.bam | polyACallerWorkDir/  | /public/home/liuzj/publicPipeline/snuupy/example/00_data/workspace | /public/home/liuzj/publicPipeline/snuupy/example/00_data/nanoporeSeqSummary.txt | /public/home/liuzj/publicPipeline/snuupy/example/00_data/ref/annoFile/gene.bed | /public/home/liuzj/softwares/anaconda3/bin/minimap2 | /public/home/liuzj/publicPipeline/snuupy/example/00_data/ref/annoFile/genome.fa | /public/home/liuzj/publicPipeline/snuupy/example/00_data/nanopore.fa |
rule addPolyATag:
    input:
        barcodeAssignmentFinished = resultDir + 'step9_barcodeAssignment/' + '{sample}.finished',
        addGeneNameFinished = resultDir + 'step12_addGeneName/' + '{sample}.finished',
    output:
        addPolyATagFinished = resultDir + 'step14_addPolyATag/' + '{sample}.finished',
    params:
        gpu = 0,
        addGNPABam = lambda wildcard: df_addPolyATag.at[wildcard.sample, 'addGNPABam'],
        polyACallerWorkDir = lambda wildcard: df_addPolyATag.at[wildcard.sample, 'polyACallerWorkDir'],
        nanoporeWorkspace = lambda wildcard: df_addPolyATag.at[wildcard.sample, 'nanoporeWorkspace'],
        nanoporeSeqSummary = lambda wildcard: df_addPolyATag.at[wildcard.sample, 'nanoporeSeqSummary'],
        geneAnnoBed = lambda wildcard: df_addPolyATag.at[wildcard.sample, 'geneAnnoBed'],
        minimap2Path = lambda wildcard: df_addPolyATag.at[wildcard.sample, 'minimap2Path'],
        genomeFa = lambda wildcard: df_addPolyATag.at[wildcard.sample, 'genomeFa'],
        rawNanoporeFa = lambda wildcard: df_addPolyATag.at[wildcard.sample, 'rawNanoporeFa'],
        nanoporeAssigned = lambda wildcard: df_barcodeAssignment.at[wildcard.sample, 'nanoporeAssigned'],
        addGNBam = lambda wildcard: df_addGeneName.at[wildcard.sample, 'addGNBam'],
    threads:48
    priority:0
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py addPolyATag --in-fasta {params.rawNanoporeFa} --genome {params.genomeFa} -t {threads} --in-f5-workspace {params.nanoporeWorkspace} --in-f5-summary {params.nanoporeSeqSummary} --bed {params.geneAnnoBed} --tempDir {params.polyACallerWorkDir} --feather {params.nanoporeAssigned} --in-bam {params.addGNBam} --out-bam {params.addGNPABam} --minimap {params.minimap2Path}
touch {output.addPolyATagFinished}
        """

# parameter's dataframe of polyAClusterDetected: 
# |      | polyAClusterDir   | polyAClusterResult                      | geneAnnoBed                                                                    | genomeFa                                                                        |
# |:-----|:------------------|:----------------------------------------|:-------------------------------------------------------------------------------|:--------------------------------------------------------------------------------|
# | test | polyACluster/     | polyACluster/polya_cluster.filtered.bed | /public/home/liuzj/publicPipeline/snuupy/example/00_data/ref/annoFile/gene.bed | /public/home/liuzj/publicPipeline/snuupy/example/00_data/ref/annoFile/genome.fa |
rule polyAClusterDetected:
    input:
        addPolyATagFinished = resultDir + 'step14_addPolyATag/' + '{sample}.finished',
    output:
        polyAClusterDetectedFinished = resultDir + 'step15_polyAClusterDetected/' + '{sample}.finished',
    params:
        gpu = 0,
        polyAClusterDir = lambda wildcard: df_polyAClusterDetected.at[wildcard.sample, 'polyAClusterDir'],
        geneAnnoBed = lambda wildcard: df_polyAClusterDetected.at[wildcard.sample, 'geneAnnoBed'],
        genomeFa = lambda wildcard: df_polyAClusterDetected.at[wildcard.sample, 'genomeFa'],
        addGNPABam = lambda wildcard: df_addPolyATag.at[wildcard.sample, 'addGNPABam'],
    threads:48
    priority:0
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py polyAClusterDetected --infile {params.addGNPABam} --gene-bed {params.geneAnnoBed} --out-dir {params.polyAClusterDir} -t {threads} --fasta {params.genomeFa} --bed12
touch {output.polyAClusterDetectedFinished}
        """

# parameter's dataframe of generateMtx: 
# |      | h5muPath    | usedIntron                                                     |
# |:-----|:------------|:---------------------------------------------------------------|
# | test | result.h5mu | /data/Zhaijx/liuzj/data/Araport11/select_intron_by_Cyto.id.txt |
rule generateMtx:
    input:
        getSpliceInfoFinished = resultDir + 'step13_getSpliceInfo/' + '{sample}.finished',
        addPolyATagFinished = resultDir + 'step14_addPolyATag/' + '{sample}.finished',
        polyAClusterDetectedFinished = resultDir + 'step15_polyAClusterDetected/' + '{sample}.finished',
        runCellRangerFinished = resultDir + 'step1_runCellRanger/' + '{sample}.finished',
    output:
        generateMtxFinished = resultDir + 'step16_generateMtx/' + '{sample}.finished',
    params:
        gpu = 0,
        h5muPath = lambda wildcard: df_generateMtx.at[wildcard.sample, 'h5muPath'],
        usedIntron = lambda wildcard: df_generateMtx.at[wildcard.sample, 'usedIntron'],
        splicingInfo = lambda wildcard: df_getSpliceInfo.at[wildcard.sample, 'splicingInfo'],
        addGNPABam = lambda wildcard: df_addPolyATag.at[wildcard.sample, 'addGNPABam'],
        polyAClusterResult = lambda wildcard: df_polyAClusterDetected.at[wildcard.sample, 'polyAClusterResult'],
        illuminaMtx = lambda wildcard: df_runCellRanger.at[wildcard.sample, 'illuminaMtx'],
    threads:2
    priority:0
    shell:
        """
cd {pipelineDir}
if [ {params.usedIntron} = False ]
then 
    python ./snuupy/snuupy.py generateMtx --not-FullLength -i {params.splicingInfo} --in-illumina {params.illuminaMtx} --apa-pac {params.polyAClusterResult} --apa-bam {params.addGNPABam} --ir --out-h5mu {params.h5muPath}
else
    python ./snuupy/snuupy.py generateMtx --not-FullLength -i {params.splicingInfo} --in-illumina {params.illuminaMtx} --apa-pac {params.polyAClusterResult} --apa-bam {params.addGNPABam} --ir --ir-list {params.usedIntron} --out-h5mu {params.h5muPath}
fi
touch {output.generateMtxFinished}
        """


