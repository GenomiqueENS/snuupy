configfile: "/public/home/liuzj/projects/test/testSnuupy/kbMode/config.yaml"
pipelineDir = config['pipelineDir']


rule all:
    input:
        generateMtxFinished = f"{config['resultDir']}step16_generateMtx/generateMtxFinished.empty"

rule runKb:
    input:
        illuminaFastqs = config['illuminaFastqs']
    output:
        runKbFinished = f"{config['resultDir']}step1_runKb/runKbFinished.empty"
    params:
        kbPath = config['kbPath'],
        kbIndex = config['kbIndex'],
        transTg = config['transTg'],
        useKit = config['useKit'],
        cdnaTc = config['cdnaTc'],
        intronTc = config['intronTc'],
        illuminaFastqs = config['illuminaFastqs'],
        KbOutputDir = f"{config['resultDir']}step1_runKb/KbOutputDir/",
        gpu = "0"

    threads:56
    shell:
        """
cd {pipelineDir}
{params.kbPath} count --verbose --filter -t {threads} --workflow nucleus --report --h5ad -i {params.kbIndex} -g {params.transTg} -x 10XV2 -c1 {params.cdnaTc} -c2 {params.intronTc} -o {params.KbOutputDir} {input.illuminaFastqs}/* &&touch {output.runKbFinished}
        """

rule getIlluminaAdata:
    input:
        runKbFinished = f"{config['resultDir']}step1_runKb/runKbFinished.empty"
    output:
        illuminaKbAd = f"{config['resultDir']}step2_getIlluminaAdata/illuminaKbAd.h5ad"
    params:
        transTg = config['transTg'],
        kbMatrix = f"{config['resultDir']}step1_runKb/KbOutputDir/matrix.ec",
        kbSpliceBus = f"{config['resultDir']}step1_runKb/KbOutputDir/spliced.filtered.bus",
        kbUnspliceBus = f"{config['resultDir']}step1_runKb/KbOutputDir/unspliced.filtered.bus",
        gpu = "0"

    threads:1
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py generateH5adFromKb --tg {params.transTg} --ec {params.kbMatrix} --splice-bus {params.kbSpliceBus} --unsplice-bus {params.kbUnspliceBus} -o {output.illuminaKbAd}
        """

rule generateIlluminaWindow:
    input:
        runKbFinished = f"{config['resultDir']}step1_runKb/runKbFinished.empty"
    output:
        generateIlluminaWindowFinished = f"{config['resultDir']}step3_generateIlluminaWindow/generateIlluminaWindowFinished.empty"
    params:
        transTg = config['transTg'],
        geneAnnoGtf = config['geneAnnoGtf'],
        kbMatrix = f"{config['resultDir']}step1_runKb/KbOutputDir/matrix.ec",
        kbSpliceBus = f"{config['resultDir']}step1_runKb/KbOutputDir/spliced.filtered.bus",
        kbUnspliceBus = f"{config['resultDir']}step1_runKb/KbOutputDir/unspliced.filtered.bus",
        generateIlluminaWindow = f"{config['resultDir']}step3_generateIlluminaWindow/generateIlluminaWindow/",
        gpu = "0"

    threads:1
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py generateIlluminaWindowFromKb --tg {params.transTg} --ec {params.kbMatrix} --splice-bus {params.kbSpliceBus} --unsplice-bus {params.kbUnspliceBus} --gtf {params.geneAnnoGtf} -o {params.generateIlluminaWindow} && touch {output.generateIlluminaWindowFinished}
        """

rule minimapMappingRaw:
    input:
        rawNanoporeFa = config['rawNanoporeFa']
    output:
        rawMappingResult = f"{config['resultDir']}step4_minimapMappingRaw/rawMappingResult.bam"
    params:
        minimap2Path = config['minimap2Path'],
        genomeFa = config['genomeFa'],
        geneAnnoBed = config['geneAnnoBed'],
        gpu = "0"

    threads:56
    shell:
        """
cd {pipelineDir}
{params.minimap2Path} -ax splice --secondary=no -uf --MD --sam-hit-only -t {threads} --junc-bed {params.geneAnnoBed} {params.genomeFa} {input.rawNanoporeFa} | samtools sort - -o {output.rawMappingResult} && samtools index {output.rawMappingResult}
        """

rule addUnmappedBaseTag:
    input:
        rawMappingResult = f"{config['resultDir']}step4_minimapMappingRaw/rawMappingResult.bam"
    output:
        rawMappingResultAddUnmappedTag = f"{config['resultDir']}step5_addUnmappedBaseTag/rawMappingResultAddUnmappedTag.bam"
    params:
        rawNanoporeFa = config['rawNanoporeFa'],
        gpu = "0"

    threads:1
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py addUnmappedBaseTag -i {input.rawMappingResult} -f {params.rawNanoporeFa} -o {output.rawMappingResultAddUnmappedTag}
        """

rule generateNanoporeWindow:
    input:
        rawMappingResultAddUnmappedTag = f"{config['resultDir']}step5_addUnmappedBaseTag/rawMappingResultAddUnmappedTag.bam"
    output:
        generateNanoporeWindowFinished = f"{config['resultDir']}step6_generateNanoporeWindow/generateNanoporeWindowFinished.empty"
    params:
        generateNanoporeWindow = f"{config['resultDir']}step6_generateNanoporeWindow/generateNanoporeWindow/",
        genomeFai = config['genomeFai'],
        windowSize = 500,
        gpu = "0"

    threads:5
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py generateNanoporeWindow --genome {params.genomeFai} -b {input.rawMappingResultAddUnmappedTag} -w {params.windowSize} -o {params.generateNanoporeWindow} && touch {output.generateNanoporeWindowFinished}
        """

rule windowBlast:
    input:
        generateIlluminaWindowFinished = f"{config['resultDir']}step3_generateIlluminaWindow/generateIlluminaWindowFinished.empty",
        generateNanoporeWindowFinished = f"{config['resultDir']}step6_generateNanoporeWindow/generateNanoporeWindowFinished.empty"
    output:
        windowBlastFinished = f"{config['resultDir']}step7_windowBlast/windowBlastFinished.empty"
    params:
        blastResults = f"{config['resultDir']}step7_windowBlast/blastResults/",
        generateIlluminaWindow = f"{config['resultDir']}step3_generateIlluminaWindow/generateIlluminaWindow/",
        generateNanoporeWindow = f"{config['resultDir']}step6_generateNanoporeWindow/generateNanoporeWindow/",
        blastPath = config['blastPath'],
        gpu = "0"

    threads:56
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py windowBlast -i {params.generateIlluminaWindow} -n {params.generateNanoporeWindow} -o {params.blastResults} -t {threads} -b {params.blastPath} && touch {output.windowBlastFinished}
        """

rule getMismatch:
    input:
        windowBlastFinished = f"{config['resultDir']}step7_windowBlast/windowBlastFinished.empty",
        rawMappingResultAddUnmappedTag = f"{config['resultDir']}step5_addUnmappedBaseTag/rawMappingResultAddUnmappedTag.bam"
    output:
        nanoporeED = f"{config['resultDir']}step8_getMismatch/nanoporeED.feather"
    params:
        windowBlastMerged = f"{config['resultDir']}step7_windowBlast/blastResults/allResult.result",
        gpu = "0"

    threads:56
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py getMismatch -i {params.windowBlastMerged} -b {input.rawMappingResultAddUnmappedTag} -o {output.nanoporeED} -t {threads}
        """

rule barcodeAssignment:
    input:
        nanoporeED = f"{config['resultDir']}step8_getMismatch/nanoporeED.feather"
    output:
        nanoporeAssigned = f"{config['resultDir']}step9_barcodeAssignment/nanoporeAssigned.feather"
    params:
        barcodeED = 3,
        umiED = 3,
        gpu = "0"

    threads:2
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py barcodeAssignment -i {input.nanoporeED} -o {output.nanoporeAssigned} --ED-barcode {params.barcodeED} --ED-UMI {params.umiED}
        """

rule polishReads:
    input:
        nanoporeAssigned = f"{config['resultDir']}step9_barcodeAssignment/nanoporeAssigned.feather",
        rawNanoporeFa = config['rawNanoporeFa']
    output:
        polishedReads = f"{config['resultDir']}step10_polishReads/polishedReads.fa"
    params:
        polishReadsTempRaw = f"{config['resultDir']}step10_polishReads/polishReadsTempRaw/",
        polishReadsTempFinal = f"{config['resultDir']}step10_polishReads/polishReadsTempFinal/",
        minimap2Path = config['minimap2Path'],
        seqkitPath = config['seqkitPath'],
        poaPath = config['poaPath'],
        raconPath = config['raconPath'],
        penaltyMatPath = config['penaltyMatPath'],
        gpu = "0"

    threads:56
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py polishReads -i {input.nanoporeAssigned} -f {input.rawNanoporeFa} -T {params.polishReadsTempRaw} -F {params.polishReadsTempFinal} -o {output.polishedReads} -p {params.penaltyMatPath} -t {threads} --minimap2 {params.minimap2Path} --poa {params.poaPath} --racon {params.raconPath} --seqkit {params.seqkitPath}
        """

rule minimapMappingPolished:
    input:
        polishedReads = f"{config['resultDir']}step10_polishReads/polishedReads.fa"
    output:
        polishedMappingResult = f"{config['resultDir']}step11_minimapMappingPolished/polishedMappingResult.bam"
    params:
        minimap2Path = config['minimap2Path'],
        genomeFa = config['genomeFa'],
        geneAnnoBed = config['geneAnnoBed'],
        gpu = "0"

    threads:56
    shell:
        """
cd {pipelineDir}
{params.minimap2Path} -ax splice --secondary=no -uf --MD --sam-hit-only -t {threads} --junc-bed {params.geneAnnoBed} {params.genomeFa} {input.polishedReads} | samtools sort - -o {output.polishedMappingResult} && samtools index {output.polishedMappingResult}
        """

rule addGeneName:
    input:
        polishedMappingResult = f"{config['resultDir']}step11_minimapMappingPolished/polishedMappingResult.bam"
    output:
        polishedReadsAddGNPickle = f"{config['resultDir']}step12_addGeneName/polishedReadsAddGNPickle.pickle",
        polishedReadsAddGNBam = f"{config['resultDir']}step12_addGeneName/polishedReadsAddGNBam.bam"
    params:
        geneAnnoBed = config['geneAnnoBed'],
        bedtoolsPath = config['bedtoolsPath'],
        gpu = "0"

    threads:1
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py addGeneName -i {input.polishedMappingResult} --bed {params.geneAnnoBed} --out-pickle {output.polishedReadsAddGNPickle} --out-bam {output.polishedReadsAddGNBam} --bedtools {params.bedtoolsPath}
        """

rule getSpliceInfo:
    input:
        polishedMappingResult = f"{config['resultDir']}step11_minimapMappingPolished/polishedMappingResult.bam",
        polishedReadsAddGNPickle = f"{config['resultDir']}step12_addGeneName/polishedReadsAddGNPickle.pickle"
    output:
        splicingInfo = f"{config['resultDir']}step13_getSpliceInfo/splicingInfo.tsv"
    params:
        bedtoolsPath = config['bedtoolsPath'],
        geneAnnoRepreBed = config['geneAnnoRepreBed'],
        gpu = "0"

    threads:1
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py getSpliceInfo -i {input.polishedMappingResult} -b {params.geneAnnoRepreBed} -o {output.splicingInfo} -g {input.polishedReadsAddGNPickle} --bedtools {params.bedtoolsPath}
        """

rule addPolyATag:
    input:
        nanoporeAssigned = f"{config['resultDir']}step9_barcodeAssignment/nanoporeAssigned.feather",
        polishedReadsAddGNBam = f"{config['resultDir']}step12_addGeneName/polishedReadsAddGNBam.bam",
        rawNanoporeFa = config['rawNanoporeFa'],
        nanoporeWorkspace = config['nanoporeWorkspace'],
        nanoporeSeqSummary = config['nanoporeSeqSummary'],
        geneAnnoBed = config['geneAnnoBed']
    output:
        polishedReadsAddGNPABam = f"{config['resultDir']}step14_addPolyATag/polishedReadsAddGNPABam.bam"
    params:
        polyACallerTemp = f"{config['resultDir']}step14_addPolyATag/polyACallerTemp/",
        genomeFa = config['genomeFa'],
        geneAnnoBed = config['geneAnnoBed'],
        minimap2Path = config['minimap2Path'],
        gpu = "0"

    threads:56
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py addPolyATag --in-fasta {input.rawNanoporeFa} --genome {params.genomeFa} -t {threads} --in-f5-workspace {input.nanoporeWorkspace} --in-f5-summary {input.nanoporeSeqSummary} --bed {params.geneAnnoBed} --tempDir {params.polyACallerTemp} --feather {input.nanoporeAssigned} --in-bam {input.polishedReadsAddGNBam} --out-bam {output.polishedReadsAddGNPABam} --minimap {params.minimap2Path}
        """

rule polyAClusterDetected:
    input:
        polishedReadsAddGNPABam = f"{config['resultDir']}step14_addPolyATag/polishedReadsAddGNPABam.bam"
    output:
        polyAClusterDetectedFinished = f"{config['resultDir']}step15_polyAClusterDetected/polyAClusterDetectedFinished.empty"
    params:
        polyACluster = f"{config['resultDir']}step15_polyAClusterDetected/polyACluster/",
        geneNot12Bed = config['geneNot12Bed'],
        genomeFa = config['genomeFa'],
        gpu = "0"

    threads:56
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py polyAClusterDetected --infile {input.polishedReadsAddGNPABam} --gene-bed {params.geneNot12Bed} --out-dir {params.polyACluster} -t {threads} --fasta {params.genomeFa} && touch {output.polyAClusterDetectedFinished}
        """

rule generateMtx:
    input:
        splicingInfo = f"{config['resultDir']}step13_getSpliceInfo/splicingInfo.tsv",
        polishedReadsAddGNPABam = f"{config['resultDir']}step14_addPolyATag/polishedReadsAddGNPABam.bam",
        polyAClusterDetectedFinished = f"{config['resultDir']}step15_polyAClusterDetected/polyAClusterDetectedFinished.empty",
        illuminaKbAd = f"{config['resultDir']}step2_getIlluminaAdata/illuminaKbAd.h5ad"
    output:
        generateMtxFinished = f"{config['resultDir']}step16_generateMtx/generateMtxFinished.empty"
    params:
        IlluminaMultiMat = f"{config['resultDir']}step16_generateMtx/IlluminaMultiMat/",
        NanoporeMultiMat = f"{config['resultDir']}step16_generateMtx/NanoporeMultiMat/",
        usedIntron = config['usedIntron'],
        apaCluster = f"{config['resultDir']}step15_polyAClusterDetected/polyACluster/polya_cluster.filtered.bed",
        gpu = "0"

    threads:1
    shell:
        """
cd {pipelineDir}
python ./snuupy/snuupy.py generateMtx -i {input.splicingInfo} --in-illumina {input.illuminaKbAd} --apa-pac {params.apaCluster} --apa-bam {input.polishedReadsAddGNPABam} --ir --ir-list {params.usedIntron} --out-nanopore {params.NanoporeMultiMat} --out-illumina {params.IlluminaMultiMat} && touch {output.generateMtxFinished}
        """

